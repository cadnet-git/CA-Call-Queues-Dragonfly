// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Website2
{
    public partial class CallqueuesContext : DbContext
    {
        public CallqueuesContext()
        {
        }

        public CallqueuesContext(DbContextOptions<CallqueuesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AppointmentDocument> AppointmentDocuments { get; set; }
        public virtual DbSet<AppointmentHistory> AppointmentHistories { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<DiaryItem> DiaryItems { get; set; }
        public virtual DbSet<BlazorDiaryItemsList> BlazorDiaryItemsLists { get; set; }
        public virtual DbSet<User> Users { get; set; }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AppointmentDocument>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileName).HasMaxLength(250);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Title).HasMaxLength(250);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<AppointmentHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AppointmentHistory");

                entity.HasIndex(e => e.AppId);

                entity.Property(e => e.Added)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AppId).HasColumnName("AppID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Note).HasMaxLength(100);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.HasIndex(e => e.AgentId)
                    .HasName("AgentID");

                entity.HasIndex(e => e.CompanyStatus)
                    .HasName("Companystatus");

                entity.HasIndex(e => e.HoldUntil)
                    .HasName("IX_CompaniesHolduntil");

                entity.HasIndex(e => e.Id118)
                    .HasName("IX_Companies_118");

                entity.HasIndex(e => new { e.AgentId, e.PostCodeId, e.HoldUntil });

                entity.HasIndex(e => new { e.Id, e.AllowCall, e.AgentId })
                    .HasName("IX_Companies_AllowCall_AgentID");

                entity.HasIndex(e => new { e.PostCodeId, e.AgentId, e.HoldUntil })
                    .HasName("IX_Companies_AgentID_HoldUntil");

                entity.HasIndex(e => new { e.Id, e.PostCodeId, e.CompanyStatus, e.AllowCall, e.AgentId, e.HoldUntil })
                    .HasName("NewIndex");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.AgentId).HasColumnName("AgentID");

                entity.Property(e => e.AllowCall).HasDefaultValueSql("((1))");

                entity.Property(e => e.CallBackMonth).HasDefaultValueSql("((-1))");

                entity.Property(e => e.CallBackYear).HasDefaultValueSql("((-1))");

                entity.Property(e => e.CompanyName).HasMaxLength(100);

                entity.Property(e => e.CompanyStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'ColdCall')");

                entity.Property(e => e.ConsentGivenByDate).HasColumnType("datetime");

                entity.Property(e => e.ConsentUntil).HasColumnType("datetime");

                entity.Property(e => e.ContactForename).HasMaxLength(50);

                entity.Property(e => e.ContactPosition).HasMaxLength(50);

                entity.Property(e => e.ContactSurname).HasMaxLength(50);

                entity.Property(e => e.ContactTitle).HasMaxLength(50);

                entity.Property(e => e.County).HasMaxLength(50);

                entity.Property(e => e.Dditel)
                    .HasColumnName("DDITel")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Employees).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.HoldUntil).HasColumnType("datetime");

                entity.Property(e => e.Id118).HasColumnName("ID118");

                entity.Property(e => e.ImportBatchId).HasColumnName("ImportBatchID");

                entity.Property(e => e.IsStandardLifedata).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastCalled).HasColumnType("datetime");

                entity.Property(e => e.LocationId).HasColumnName("LocationID");

                entity.Property(e => e.MainTel).HasMaxLength(50);

                entity.Property(e => e.MobileTel).HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(400);

                entity.Property(e => e.OriginalNumber).HasMaxLength(50);

                entity.Property(e => e.OriginalStatus).HasMaxLength(50);

                entity.Property(e => e.PolicyExpires).HasColumnType("datetime");

                entity.Property(e => e.PolicyProvider).HasMaxLength(50);

                entity.Property(e => e.PostCodeId).HasColumnName("PostCodeID");

                entity.Property(e => e.PostcodeRaw).HasMaxLength(50);

                entity.Property(e => e.Promotion)
                    .HasMaxLength(250)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SeniorDecisionMaker).HasMaxLength(400);

                entity.Property(e => e.Telephone).HasMaxLength(20);

                entity.Property(e => e.Town).HasMaxLength(50);

                entity.Property(e => e.Tpsuntil)
                    .HasColumnName("TPSUntil")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1 Jan 2011')");

                entity.Property(e => e.Urn)
                    .HasColumnName("URN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DiaryItem>(entity =>
            {
                entity.HasIndex(e => e.CompanyId)
                    .HasName("IX_DiaryItemsCompanyID");

                entity.HasIndex(e => new { e.Status, e.Type });

                entity.HasIndex(e => new { e.Id, e.ItemPeriod, e.CompanyId, e.Type, e.Description, e.Postcode, e.Latitude, e.Longitude, e.Conclusion, e.UserId, e.ItemDate, e.Status })
                    .HasName("IX_DiaryItems_UserID_ItemDate_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AgentId).HasColumnName("AgentID");

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.Conclusion).HasMaxLength(255);

                entity.Property(e => e.ConclusionDate).HasColumnType("datetime");

                entity.Property(e => e.Confirmed)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N' ')");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CscalledBefore)
                    .HasColumnName("CSCalledBefore")
                    .HasMaxLength(5);

                entity.Property(e => e.Cscomments)
                    .HasColumnName("CSComments")
                    .HasMaxLength(500);

                entity.Property(e => e.Cscompleted).HasColumnName("CSCompleted");

                entity.Property(e => e.CscompletedDate)
                    .HasColumnName("CSCompletedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Csprofessional)
                    .HasColumnName("CSProfessional")
                    .HasMaxLength(5);

                entity.Property(e => e.Cspunctual)
                    .HasColumnName("CSPunctual")
                    .HasMaxLength(5);

                entity.Property(e => e.CsquoteInfo)
                    .HasColumnName("CSQuoteInfo")
                    .HasMaxLength(5);

                entity.Property(e => e.CsquoteMethod)
                    .HasColumnName("CSQuoteMethod")
                    .HasMaxLength(50);

                entity.Property(e => e.CsquotedInMeeting)
                    .HasColumnName("CSQuotedInMeeting")
                    .HasMaxLength(5);

                entity.Property(e => e.Cssent)
                    .HasColumnName("CSSent")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.FbReason).HasMaxLength(50);

                entity.Property(e => e.FbappSat).HasColumnName("FBAppSat");

                entity.Property(e => e.Fbcontact)
                    .HasColumnName("FBContact")
                    .HasMaxLength(100);

                entity.Property(e => e.FbinvolvedPmi).HasColumnName("FBInvolvedPMI");

                entity.Property(e => e.FbisSale).HasColumnName("FBisSale");

                entity.Property(e => e.FblifeNextContact)
                    .HasColumnName("FBLifeNextContact")
                    .HasMaxLength(50);

                entity.Property(e => e.FblifeNotPresented)
                    .HasColumnName("FBLifeNotPresented")
                    .HasMaxLength(150);

                entity.Property(e => e.FblifeOutCome)
                    .HasColumnName("FBLifeOutCome")
                    .HasMaxLength(50);

                entity.Property(e => e.FblifeSoldDate)
                    .HasColumnName("FBLifeSoldDate")
                    .HasMaxLength(50);

                entity.Property(e => e.FblifeStartedDate)
                    .HasColumnName("FBLifeStartedDate")
                    .HasMaxLength(50);

                entity.Property(e => e.FblifeValue)
                    .HasColumnName("FBLifeValue")
                    .HasMaxLength(50);

                entity.Property(e => e.Fbnote)
                    .HasColumnName("FBNote")
                    .HasMaxLength(1024);

                entity.Property(e => e.FboutCome)
                    .HasColumnName("FBOutCome")
                    .HasMaxLength(50);

                entity.Property(e => e.FbpminextContact)
                    .HasColumnName("FBPMINextContact")
                    .HasMaxLength(50);

                entity.Property(e => e.FbpminotPresented)
                    .HasColumnName("FBPMINotPresented")
                    .HasMaxLength(150);

                entity.Property(e => e.Fbposition)
                    .HasColumnName("FBPosition")
                    .HasMaxLength(50);

                entity.Property(e => e.FbpreviousProvider)
                    .HasColumnName("FBPreviousProvider")
                    .HasMaxLength(50);

                entity.Property(e => e.Fbprovider)
                    .HasColumnName("FBProvider")
                    .HasMaxLength(50);

                entity.Property(e => e.Fbrenewal)
                    .HasColumnName("FBRenewal")
                    .HasMaxLength(50);

                entity.Property(e => e.FbsaleType)
                    .HasColumnName("FBSaleType")
                    .HasMaxLength(50);

                entity.Property(e => e.FbsoldDate)
                    .HasColumnName("FBSoldDate")
                    .HasMaxLength(50);

                entity.Property(e => e.FbstartDate)
                    .HasColumnName("FBStartDate")
                    .HasMaxLength(50);

                entity.Property(e => e.Fbvalue)
                    .HasColumnName("FBValue")
                    .HasMaxLength(20);

                entity.Property(e => e.FeedbackDate).HasColumnType("datetime");

                entity.Property(e => e.FeedbackStatus).HasMaxLength(255);

                entity.Property(e => e.ItemDate).HasColumnType("datetime");

                entity.Property(e => e.NextcallDate).HasColumnType("datetime");

                entity.Property(e => e.PolicyStarts).HasColumnType("datetime");

                entity.Property(e => e.PolicyType).HasMaxLength(50);

                entity.Property(e => e.Postcode).HasMaxLength(10);

                entity.Property(e => e.SoldDate).HasColumnType("datetime");

                entity.Property(e => e.Type).HasMaxLength(3);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });
            modelBuilder.Entity<BlazorDiaryItemsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("blazorDiaryItemsList");

                entity.Property(e => e.AreaTitle).HasMaxLength(50);

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.CompanyName).HasMaxLength(100);

                entity.Property(e => e.Conclusion).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ItemDate).HasColumnType("datetime");

                entity.Property(e => e.Postcode).HasMaxLength(10);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Town).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(3);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.Address4).HasMaxLength(50);

                entity.Property(e => e.Address5).HasMaxLength(50);

                entity.Property(e => e.AppPerWeek).HasDefaultValueSql("((0))");

                entity.Property(e => e.AppTime1).HasColumnType("datetime");

                entity.Property(e => e.AppTime2).HasColumnType("datetime");

                entity.Property(e => e.AppTime3).HasColumnType("datetime");

                entity.Property(e => e.AppTime4).HasColumnType("datetime");

                entity.Property(e => e.AppTime5).HasColumnType("datetime");

                entity.Property(e => e.AreaId).HasColumnName("AreaID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.HasApp3).HasDefaultValueSql("((1))");

                entity.Property(e => e.LongMaxDist).HasDefaultValueSql("((49))");

                entity.Property(e => e.MedMaxDist).HasDefaultValueSql("((35))");

                entity.Property(e => e.OkmaxDist)
                    .HasColumnName("OKMaxDist")
                    .HasDefaultValueSql("((25))");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.Postcode).HasMaxLength(50);

                entity.Property(e => e.RealName).HasMaxLength(50);

                entity.Property(e => e.SuspendCallbacks).HasDefaultValueSql("((0))");

                entity.Property(e => e.Tel).HasMaxLength(50);

                entity.Property(e => e.UserLevelId).HasColumnName("UserLevelID");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}